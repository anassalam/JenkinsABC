# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

pool:
  vmImage: 'Ubuntu 16.04'

variables:
  appName: 'containerapp'
  buildConfiguration: 'Release'
  baseName: 'pdfservice112'
  dockerId: '$(baseName)acr'
  dockerPassword: '/m4RGk3Unu5nvjoRKVlIxNK8gk9gszo0'
  imageName: '$(appName):$(Build.BuildId)'
  #imageName: '$(appName):v1'
  dockerServer: '$(dockerId).azurecr.io'
  resourcegroupName: '$(baseName)-rg'
  clusterName: '$(baseName)-cluster'
  AKS.KubeDeploymentYaml: '$(System.DefaultWorkingDirectory)/file1.yml'
steps:

#- script: dotnet restore
#  displayName: 'Packages Restore'
#
#- script: dotnet build --configuration $(buildConfiguration)
#  displayName: 'Code Build'
#
#- script: dotnet test DotNet.Test --configuration $(buildConfiguration) --logger trx
#  displayName: 'Test Cases'
#
#- script: dotnet publish --configuration $(buildConfiguration)
#  displayName: 'Publishing'
#
#- task: PublishTestResults@2
#  inputs:
#   testRunner: VSTest
#   testResultsFiles: '**/*.trx'
#
#- task: ArchiveFiles@2
#  displayName: "Archive files"
#  inputs:
#   rootFolderOrFile: "$(System.DefaultWorkingDirectory)"
#   includeRootFolder: false
#   archiveFile: "$(System.DefaultWorkingDirectory)/$(Build.BuildId).zip"
#
#
#- task: PublishBuildArtifacts@1
#  inputs:
#   PathtoPublish: '$(System.DefaultWorkingDirectory)'
#   name: 'drop'
#
#
##--------------------------------------------------------
##|                       Docker                         |
##--------------------------------------------------------
#
#- script: docker build -f ./ContainerApp/Dockerfile -t $(dockerServer)/$(imageName) . 
#  displayName: 'Container Build'
#
#- script: docker login -u $(dockerId) -p $(dockerPassword) $(dockerServer)
#  displayName: 'Container Service login'
#
#- script: docker push $(dockerServer)/$(imageName)
#  displayName: 'Container Push'

  ##- script: kubectl apply -f ./azure-kubernetes-deployment.yml

- powershell: |  
       $yamlFileContent="apiVersion: apps/v1beta1
       kind: Deployment
       metadata:
         name: $(appName)
       spec:
         replicas: 1
         template:
           metadata:
             labels:
               app: $(appName)
           spec:
             containers:
             - name: $(appName)
               image: $(dockerServer)/$(imageName)
               ports:
               - containerPort: 80
               env:
               - name: REDIS
                 value: $(appName)
             imagePullSecrets:
             - name: acr-auth
       apiVersion: v1
       kind: Service
       metadata:
         name: $(appName)
         annotations:
           service.beta.kubernetes.io/azure-load-balancer-internal: 'true'
       spec:
         type: LoadBalancer
         ports:
         - port: 80
         selector:
           app: $(appName)"

       Set-Content -Path $(AKS.KubeDeploymentYaml) -Value $yamlFileContent 
  displayName: 'Generate kubernetes deployment yaml'

- script: cat $(AKS.KubeDeploymentYaml)
  displayName: 'CAT'

- task: Kubernetes@1
  displayName: 'kubectl apply'
  inputs:
    azureSubscriptionEndpoint: 'Free Trial (af2e0df6-9d6d-4147-913f-7d42dc282f13)'
    azureResourceGroup: '$(resourcegroupName)'
    kubernetesCluster: '$(clusterName)'
    #useConfigurationFile: true
    #configuration: azure-kubernetes-deployment.yml
    arguments: '-f $(AKS.KubeDeploymentYaml)'